# main.py
import asyncio
import logging
import signal # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ctrl+C
import sys
import re
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import html
# ... –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã ...
from telegram import Update
from telegram.ext import Application
from telegram.error import TelegramError

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.schedulers.base import STATE_PAUSED, STATE_STOPPED, STATE_RUNNING # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è APScheduler
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import config # config –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
import database
import utils
from browser_parser import BrowserParser
from telegram_handler import TelegramHandler


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –æ–±—ä–µ–∫—Ç—ã ---
logger: Optional[logging.Logger] = None
browser_parser: Optional[BrowserParser] = None
telegram_handler: Optional[TelegramHandler] = None
scheduler: Optional[AsyncIOScheduler] = None
pending_ath_checks: Dict[str, Dict[str, Any]] = {}

# --- –°–æ–±—ã—Ç–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
shutdown_event = asyncio.Event() # –î–ª—è –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
pause_event = asyncio.Event()    # –î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–∞—É–∑—É (set = paused, clear = running)

# --- –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ ---
# –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "running", "pausing", "paused", "resuming", "stopping"
bot_status: str = "initializing" # –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å

ATH_BOT_MODE_RUNTIME: str = "BOTH" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –∏–∑ input()

# --- –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π ---
async def _clear_async_queue(q: asyncio.Queue, queue_name: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å asyncio.Queue."""
    items_cleared = 0
    while not q.empty():
        try:
            item = q.get_nowait() 
            q.task_done() # –°–æ–æ–±—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è q.join())
            items_cleared += 1
            logger.debug(f"MAIN: –ò–∑ –æ—á–µ—Ä–µ–¥–∏ {queue_name} —É–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {item}")
        except asyncio.QueueEmpty:
            break # –û—á–µ—Ä–µ–¥—å —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    if items_cleared > 0:
        logger.info(f"MAIN: –û—á–µ—Ä–µ–¥—å {queue_name} –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {items_cleared} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –ü–ê–£–ó–´ ---
async def trigger_pause(auto_triggered: bool = False, reason: Optional[str] = None):
    global bot_status # –ò—Å–ø–æ–ª—å–∑—É–µ–º nonlocal –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ main() –∏–ª–∏ global –µ—Å–ª–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
    
    if bot_status == "paused":
        msg = "MAIN: –ö–æ–º–∞–Ω–¥–∞ PAUSE –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –±–æ—Ç —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ."
        if auto_triggered and reason: 
            msg = f"MAIN: –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ-–ø–∞—É–∑—ã ({reason}), –Ω–æ –±–æ—Ç —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ."
        logger.info(msg)
        if telegram_handler and not auto_triggered: # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ
            await telegram_handler.send_notification_to_admin("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–∞—É–∑—ã.")
        return

    log_prefix = "MAIN (AUTO-PAUSE)" if auto_triggered else "MAIN (CMD PAUSE)"
    reason_str = f" (–ü—Ä–∏—á–∏–Ω–∞: {reason})" if reason else ""
    
    logger.info(f"{log_prefix}: –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø–∞—É–∑—ã{reason_str}...")
    if telegram_handler:
        if auto_triggered:
            await telegram_handler.send_notification_to_admin(
                f"‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –±–æ—Ç–∞!\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø–∞—É–∑—ã..."
            )
        else:
            await telegram_handler.send_notification_to_admin("‚è≥ –ë–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø–∞—É–∑—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ...")
    
    bot_status = "pausing"

    # 1. –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if scheduler and scheduler.running and scheduler.state != STATE_PAUSED:
        try:
            scheduler.pause()
            logger.info(f"{log_prefix}: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.")
        except Exception as e:
            logger.error(f"{log_prefix}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ –ø–∞—É–∑—É: {e}")
    
    # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–∞—É–∑—ã (–≤–ª–∏—è–µ—Ç –Ω–∞ run_parsing_cycle –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π)
    pause_event.set()
    
    # 3. –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
    if telegram_handler:
        log_prefix_local = "MAIN (AUTO-PAUSE)" if auto_triggered else "MAIN (CMD PAUSE)"
        logger.info(f"{log_prefix_local}: –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ATH —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        await _clear_async_queue(telegram_handler.ath_results_queue, "ATH results")
        logger.info(f"{log_prefix_local}: –û—á–µ—Ä–µ–¥—å Buy/Sell —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ –ø–∞—É–∑—É.")
        
    
    bot_status = "paused"
    logger.info(f"{log_prefix}: –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É{reason_str}.")
    if telegram_handler:
        await telegram_handler.send_notification_to_admin(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{reason_str}.\n –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ /play –∏–ª–∏ /stop.")

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–Ø —Ä–∞–±–æ—Ç—ã ---
async def trigger_play():
    global bot_status
    
    if bot_status != "paused":
        logger.info(f"MAIN: –ö–æ–º–∞–Ω–¥–∞ PLAY –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –±–æ—Ç –Ω–µ –Ω–∞ –ø–∞—É–∑–µ (—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {bot_status}).")
        if telegram_handler:
            await telegram_handler.send_notification_to_admin(
                f"‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –Ω–∞ –ø–∞—É–∑–µ (—Å—Ç–∞—Ç—É—Å: {bot_status}). –ö–æ–º–∞–Ω–¥–∞ /play –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
            )
        return

    logger.info("MAIN: –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /play...")
    

    if telegram_handler: await telegram_handler.send_notification_to_admin("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    bot_status = "resuming"

    # 1. –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–∞—É–∑—ã, —á—Ç–æ–±—ã —Ü–∏–∫–ª—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    pause_event.clear() 

    # 2. –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if scheduler:
        if scheduler.state == STATE_PAUSED:
            try:
                scheduler.resume()
                logger.info("MAIN: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                logger.error(f"MAIN: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
        elif scheduler.state == STATE_STOPPED:
             logger.warning("MAIN: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ –Ω–∞ –ø–∞—É–∑–µ). –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ...")
             try:
                 scheduler.start(paused=False) # APScheduler 4.x+ use start(paused=False) or just start()
                 logger.info("MAIN: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –∑–∞–ø—É—â–µ–Ω –∑–∞–Ω–æ–≤–æ (–±—ã–ª —Ä–∞–Ω–µ–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω).")
             except Exception as e:
                 logger.error(f"MAIN: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
        elif scheduler.state == STATE_RUNNING:
            logger.info("MAIN: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        else:
            logger.warning(f"MAIN: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ({scheduler.state}) –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
            
    bot_status = "running"
    logger.info("MAIN: –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É.")
    if telegram_handler: await telegram_handler.send_notification_to_admin("‚úÖ –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É.")


# --- –õ–æ–≥–∏–∫–∞ –ü–û–õ–ù–û–ì–û –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ---

async def trigger_shutdown():
    global bot_status # –£–±–µ–¥–∏—Å—å, —á—Ç–æ logger –∏ telegram_handler –¥–æ—Å—Ç—É–ø–Ω—ã (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
    if not shutdown_event.is_set():
        logger.info("MAIN: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª trigger_shutdown.")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if telegram_handler and hasattr(telegram_handler, 'send_notification_to_admin'):
            try:
                logger.info("MAIN: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ \"üõë –ë–æ—Ç Axiom Volume –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...\" –∏–∑ trigger_shutdown.")
                await telegram_handler.send_notification_to_admin("üõë –ë–æ—Ç Axiom Volume –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
                logger.info("MAIN: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ (–∏–∑ trigger_shutdown) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞–Ω–∞.")
            except Exception as e_notify_stop:
                logger.error(f"MAIN: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ trigger_shutdown: {e_notify_stop}", exc_info=True)
        else:
            logger.warning("MAIN: telegram_handler –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç send_notification_to_admin, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ trigger_shutdown.")

        bot_status = "stopping" # –°—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info("MAIN: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ó–ê–í–ï–†–®–ï–ù–ò–Ø –†–ê–ë–û–¢–´ (shutdown_event)...")
        shutdown_event.set()
        logger.info("MAIN: –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–∞—É–∑—ã (pause_event)...")
        pause_event.clear() 
    else:
        logger.info("MAIN: –°–æ–±—ã—Ç–∏–µ shutdown_event —É–∂–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ trigger_shutdown –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")


def signal_handler(sig, frame):
    sig_name = getattr(signal, f"SIG{signal.Signals(sig).name}", str(sig))
    logger.info(f"MAIN: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –û–° {sig_name} ({sig}). –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –º—è–≥–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    # ...
    try:
        loop = asyncio.get_running_loop()
        loop.call_soon_threadsafe(lambda: asyncio.create_task(trigger_shutdown()))
    except RuntimeError:
        logger.warning("MAIN: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π asyncio –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è signal_handler. –ü–æ–ø—ã—Ç–∫–∞ get_event_loop().")
        asyncio.get_event_loop().call_soon_threadsafe(lambda: asyncio.create_task(trigger_shutdown()))



# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

async def run_parsing_cycle():
    global ATH_BOT_MODE_RUNTIME, pending_ath_checks
    current_time_for_log = datetime.now().strftime('%H:%M:%S')
    
    if shutdown_event.is_set(): # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        logger.info(f"RUN_CYCLE ({current_time_for_log}): –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –ü—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        return

    if pause_event.is_set(): # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
        logger.info(f"RUN_CYCLE ({current_time_for_log}): –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ. –ü—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –∏–∑ trigger_pause –∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        return
    
    logger.info(f"RUN_CYCLE ({current_time_for_log}): –û—á–∏—Å—Ç–∫–∞ pending_ath_checks –∏ ath_results_queue –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ü–∏–∫–ª–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞.")
    pending_ath_checks.clear() # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–∂–∏–¥–∞–Ω–∏–π
    if telegram_handler: 
        await _clear_async_queue(telegram_handler.ath_results_queue, "ATH results before new cycle")
    
    logger.info(f"RUN_CYCLE ({current_time_for_log}): {'='*10} –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Axiom {'='*10}")
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å run_parsing_cycle –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # ... (–¥–æ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏)
    if not browser_parser:
        logger.error("RUN_CYCLE: –≠–∫–∑–µ–º–ø–ª—è—Ä BrowserParser –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    if not telegram_handler:
         logger.error("RUN_CYCLE: –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
         return

    # main.py, –≤–Ω—É—Ç—Ä–∏ run_parsing_cycle

    # ... (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ browser_parser –∏ telegram_handler)

    parsing_result_tuple = await browser_parser.parse_discover_page()

    if parsing_result_tuple is None:
        logger.error("RUN_CYCLE: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ parse_discover_page (–≤–µ—Ä–Ω—É–ª None). –¶–∏–∫–ª –ø—Ä–µ—Ä–≤–∞–Ω.")
        if telegram_handler:
            await telegram_handler.send_notification_to_admin("üÜò <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Axiom (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞).")
        return

    parsed_coins, rows_found_on_page = parsing_result_tuple

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if telegram_handler:
        report_message_parts = []
        report_header = f"<b>üîé –û—Ç—á–µ—Ç –æ –ø–∞—Ä—Å–∏–Ω–≥–µ Axiom ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})</b>\n"
        report_message_parts.append(report_header)

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏, –µ—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫
        if rows_found_on_page == 0:
            message = "–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Axiom –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –º–æ–Ω–µ—Ç–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            report_message_parts.append(message)
            logger.info(f"RUN_CYCLE: {message}")
        else:
            successfully_parsed_count = len(parsed_coins)
            report_message_parts.append(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {rows_found_on_page}")
            report_message_parts.append(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ –º–æ–Ω–µ—Ç: {successfully_parsed_count}")

            if successfully_parsed_count != rows_found_on_page:
                mismatch_text = "‚ö†Ô∏è <b>#MismatchInParsing –í–Ω–∏–º–∞–Ω–∏–µ!</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç. HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                report_message_parts.append(mismatch_text)
                logger.warning(f"RUN_CYCLE: {mismatch_text} –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {rows_found_on_page}, –°–ø–∞—Ä—Å–µ–Ω–æ: {successfully_parsed_count}")

            report_message_parts.append("\n<b>–ü–µ—Ä–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):</b>")

            if not parsed_coins:
                report_message_parts.append("<i>–ù–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</i>")
            else:
                coins_to_report = parsed_coins[:15]
                for idx, coin in enumerate(coins_to_report):
                    tic = coin.get('tic', 'N/A')
                    age = coin.get('age_str', '?')
                    mc_val = coin.get('mc', 0)
                    l_val = coin.get('l', 0)
                    v_val = coin.get('v', 0)
                    ca_val = coin.get('ca', 'NO_CA')
                    ca_short = ca_val[:6] + "..." if ca_val and ca_val != 'NO_CA' else "NO_CA"
                    report_message_parts.append(
                        f"<b>{idx+1}. {tic}</b> (<code>{ca_short}</code>)\n"
                        f"  –í–æ–∑—Ä–∞—Å—Ç: {age}, MC: ${mc_val:,}, Liq: ${l_val:,}, Vol: ${v_val:,}"
                    )
                if len(parsed_coins) > len(coins_to_report):
                    report_message_parts.append(f"\n<i>... –∏ –µ—â–µ {len(parsed_coins) - len(coins_to_report)} –º–æ–Ω–µ—Ç.</i>")

        final_report_message = "\n".join(report_message_parts)
        await telegram_handler.send_notification_to_admin(final_report_message)

    if not parsed_coins: # –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –Ω–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info("RUN_CYCLE: –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ.")
        logger.info(f"RUN_CYCLE ({current_time_for_log}): {'='*10} –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Axiom {'='*10}")
        return

    logger.info(f"RUN_CYCLE: –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {len(parsed_coins)} –º–æ–Ω–µ—Ç. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ATH...")
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ run_parsing_cycle)

    processed_count = 0
    for coin_data in parsed_coins:
        if shutdown_event.is_set():
            logger.info("RUN_CYCLE: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–Ω–µ—Ç.")
            break
        if pause_event.is_set():
            logger.info("RUN_CYCLE: –ü–∞—É–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö ATH –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —Ü–∏–∫–ª–∞.")
            break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ for, –µ—Å–ª–∏ –±–æ—Ç –Ω–∞ –ø–∞—É–∑–µ

        ca = coin_data.get('ca')
        age_str = coin_data.get('age_str')

        if not ca or not utils.is_valid_solana_address(ca):
            logger.warning(f"RUN_CYCLE: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π CA –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã: {coin_data}. –ü—Ä–æ–ø—É—Å–∫.")
            continue
        if not age_str:
            logger.warning(f"RUN_CYCLE: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Age –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã –¥–ª—è CA {ca}: {coin_data}. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        age_seconds = utils.time_ago_to_seconds(age_str)
        if age_seconds is not None:
            min_age_seconds_threshold = config.MIN_COIN_AGE_MINUTES_THRESHOLD * 60
            if age_seconds <= min_age_seconds_threshold:
                 logger.debug(f"RUN_CYCLE: –ú–æ–Ω–µ—Ç–∞ {coin_data.get('tic', ca)} ({ca}) —Å–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥–∞—è ({age_str} ~{age_seconds}s). "
                              f"–ü–æ—Ä–æ–≥: >{config.MIN_COIN_AGE_MINUTES_THRESHOLD} –º–∏–Ω (~{min_age_seconds_threshold}s). –ü—Ä–æ–ø—É—Å–∫.")
                 continue
            logger.debug(f"RUN_CYCLE: –ú–æ–Ω–µ—Ç–∞ {coin_data.get('tic', ca)} ({ca}) –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ({age_str}).")
        else:
            logger.warning(f"RUN_CYCLE: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –º–æ–Ω–µ—Ç—ã {coin_data.get('tic', ca)} ({ca}): '{age_str}'. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        if ca not in pending_ath_checks: # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è
            pending_ath_checks[ca] = {
                'data': coin_data, 
                'timestamp_requested': datetime.now(), # –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
                'ath1_status': 'not_sent', # –°—Ç–∞—Ç—É—Å—ã: not_sent, pending, received_ok, received_na_error, timeout
                'ath1_data': None,         # –î–∞–Ω–Ω—ã–µ: {'seconds': X} –∏–ª–∏ None
                'ath2_status': 'not_sent',
                'ath2_data': None,
                'decision_made': False     # –§–ª–∞–≥, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ CA –ø—Ä–∏–Ω—è—Ç–æ
            }
            logger.debug(f"RUN_CYCLE: –ú–æ–Ω–µ—Ç–∞ {tic} ({ca}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ pending_ath_checks —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'not_sent'.")
        else: # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –º—ã —á–∏—Å—Ç–∏–º pending_ath_checks –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
            logger.warning(f"RUN_CYCLE: –ú–æ–Ω–µ—Ç–∞ {tic} ({ca}) —É–∂–µ –≤ pending_ath_checks. –≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞.")
            # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å timestamp_requested, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º "–ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∏—Ç—å" –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
            # pending_ath_checks[ca]['timestamp_requested'] = datetime.now()
            # pending_ath_checks[ca]['decision_made'] = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ—à–µ–Ω–∏—è
            # pending_ath_checks[ca]['ath1_status'] = 'not_sent' # –ò —Å—Ç–∞—Ç—É—Å—ã
            # pending_ath_checks[ca]['ath2_status'] = 'not_sent'
            # pending_ath_checks[ca]['ath1_data'] = None
            # pending_ath_checks[ca]['ath2_data'] = None


        logger.info(f"RUN_CYCLE: –û—Ç–ø—Ä–∞–≤–∫–∞ CA {ca} ({coin_data.get('tic')}) –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ATH (–†–µ–∂–∏–º: {ATH_BOT_MODE_RUNTIME})...")
        sent_to_at_least_one_bot_in_this_iteration = False # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏


        if ATH_BOT_MODE_RUNTIME in ["ATH1", "BOTH"]:
            if config.BOT_ATH1_USERNAME:
                logger.debug(f"RUN_CYCLE: –û—Ç–ø—Ä–∞–≤–∫–∞ CA {ca} –±–æ—Ç—É ATH1: {config.BOT_ATH1_USERNAME}")
                sent1 = await telegram_handler.send_message_to_user_bot(config.BOT_ATH1_USERNAME, ca)
                if sent1: 
                    pending_ath_checks[ca]['ath1_status'] = 'pending' # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    sent_to_at_least_one_bot_in_this_iteration = True
                await asyncio.sleep(1.1)
            else:
                if ATH_BOT_MODE_RUNTIME == "ATH1": logger.warning("RUN_CYCLE: ATH_BOT_MODE='ATH1', –Ω–æ BOT_ATH1_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ config.")
                elif ATH_BOT_MODE_RUNTIME == "BOTH": logger.warning("RUN_CYCLE: ATH_BOT_MODE='BOTH', –Ω–æ BOT_ATH1_USERNAME –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–º—É.")

        if ATH_BOT_MODE_RUNTIME in ["ATH2", "BOTH"]:
            if config.BOT_ATH2_USERNAME:
                logger.debug(f"RUN_CYCLE: –û—Ç–ø—Ä–∞–≤–∫–∞ CA {ca} –±–æ—Ç—É ATH2: {config.BOT_ATH2_USERNAME}")
                sent2 = await telegram_handler.send_message_to_user_bot(config.BOT_ATH2_USERNAME, ca)
                if sent2:
                    pending_ath_checks[ca]['ath2_status'] = 'pending' # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    sent_to_at_least_one_bot_in_this_iteration = True
                await asyncio.sleep(1.1)
            else:
                if ATH_BOT_MODE_RUNTIME == "ATH2": logger.warning("RUN_CYCLE: ATH_BOT_MODE='ATH2', –Ω–æ BOT_ATH2_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ config.")
                elif ATH_BOT_MODE_RUNTIME == "BOTH": logger.warning("RUN_CYCLE: ATH_BOT_MODE='BOTH', –Ω–æ BOT_ATH2_USERNAME –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–º—É.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        active_bots_configured = False
        if ATH_BOT_MODE_RUNTIME == "ATH1" and config.BOT_ATH1_USERNAME: active_bots_configured = True
        if ATH_BOT_MODE_RUNTIME == "ATH2" and config.BOT_ATH2_USERNAME: active_bots_configured = True
        if ATH_BOT_MODE_RUNTIME == "BOTH" and (config.BOT_ATH1_USERNAME or config.BOT_ATH2_USERNAME): active_bots_configured = True
        
        if active_bots_configured and not sent_to_at_least_one_bot_in_this_iteration:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–º—É, —Ç–æ —ç—Ç–∞ –∑–∞–ø–∏—Å—å –≤ pending_ath_checks –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞
            pending_ath_checks.pop(ca, None) 
            logger.error(f"RUN_CYCLE: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CA {ca} –Ω–∏ –æ–¥–Ω–æ–º—É ATH –±–æ—Ç—É. –£–¥–∞–ª–µ–Ω –∏–∑ pending_ath_checks.")
        elif sent_to_at_least_one_bot_in_this_iteration:
            processed_count += 1
        elif not active_bots_configured:
            pending_ath_checks.pop(ca, None)
            logger.warning(f"RUN_CYCLE: CA {ca} –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ATH –±–æ—Ç–∞–º (–Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ {ATH_BOT_MODE_RUNTIME}). –£–¥–∞–ª–µ–Ω –∏–∑ pending_ath_checks.")

    logger.info(f"RUN_CYCLE: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {processed_count} CA –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ATH.")
    logger.info(f"RUN_CYCLE ({current_time_for_log}): {'='*10} –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Axiom {'='*10}")

async def process_ath_results():
    global ATH_BOT_MODE_RUNTIME
    logger_name = "ATH_PROCESSOR" # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if not telegram_handler or not database:
        logger.error(f"{logger_name}: TelegramHandler –∏–ª–∏ Database –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    logger.info(f"{logger_name}: –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ATH...")
    while not shutdown_event.is_set():
        try:
            if pause_event.is_set(): # True, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø–∞—É–∑–µ
                logger.info(f"{logger_name}: –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ (pause_event —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω). –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /play –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–∞—É–∑—ã...")
                while pause_event.is_set(): # –¶–∏–∫–ª, –ø–æ–∫–∞ —Å–æ–±—ã—Ç–∏–µ –ø–∞—É–∑—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                    if shutdown_event.is_set():
                        logger.info(f"{logger_name}: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω—è—Ç–∏—è –ø–∞—É–∑—ã.")
                        break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while pause_event.is_set()
                    await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å shutdown_event

                if shutdown_event.is_set(): # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑-–∑–∞ shutdown_event
                    logger.info(f"{logger_name}: –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ATH –∏–∑-–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã.")
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ while not shutdown_event.is_set() –≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

                # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç pause_event.is_set() —Å—Ç–∞–ª False (–ø–∞—É–∑–∞ —Å–Ω—è—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /play)
                if not pause_event.is_set():
                    logger.info(f"{logger_name}: –ü–∞—É–∑–∞ —Å–Ω—è—Ç–∞ (pause_event –æ—á–∏—â–µ–Ω). –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ ATH.")
                else:
                    # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ while –Ω–µ –ø–æ shutdown_event
                    logger.warning(f"{logger_name}: –í—ã—à–ª–∏ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—É–∑—ã, –Ω–æ pause_event –≤—Å–µ –µ—â–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ shutdown_event –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.")
                    telegram_handler.ath_results_queue.task_done() # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–µ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∑—è—Ç –¥–æ —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–¥–µ—Å—å)
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ while, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –∏–ª–∏ –ø–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ —Å–Ω—è—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await asyncio.wait_for(telegram_handler.ath_results_queue.get(), timeout=1.0)
            
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å process_ath_results –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            # ... (–¥–æ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏)
            logger.info(f"ATH_PROCESSOR: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {result}")

            ca_from_result = result.get('ca')
            error = result.get('error')
            ath_seconds = result.get('ath_seconds')
            source_bot = result.get('source_bot', 'N/A')

            if not ca_from_result or ath_seconds is None: # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                logger.error(f"ATH_PROCESSOR: –ü–æ–ª—É—á–µ–Ω –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–æ–∂–∏–¥–∞–ª—Å—è CA –∏ ath_seconds): {result}. –ü—Ä–æ–ø—É—Å–∫.")
                telegram_handler.ath_results_queue.task_done()
                continue

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
            # pending_ath_checks –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –æ—á–∏—â–µ–Ω, –µ—Å–ª–∏ —ç—Ç–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç,
            # –Ω–æ evaluate_ath_decision –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ—Å—Ç–∞–≤–∏—Ç—å 'decision_made = True'
            check_info = pending_ath_checks.get(ca_from_result) 
            if not check_info: # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –µ—Å–ª–∏ decision_made –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—Å—è)
                logger.warning(f"ATH_PROCESSOR: –î–∞–Ω–Ω—ã–µ –¥–ª—è CA '{ca_from_result}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ pending_ath_checks –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞—Ä–µ–ª. –ü—Ä–æ–ø—É—Å–∫.")
                telegram_handler.ath_results_queue.task_done()
                continue
            # –ï—Å–ª–∏ decision_made, –Ω–æ —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫-—Ç–æ —Å–Ω–æ–≤–∞ –ø–æ–ø–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if check_info.get('decision_made_and_queued'): # –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Ñ–ª–∞–≥? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—Ç—å –∏–∑ pending –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å?
                                                          # –õ—É—á—à–µ, –µ—Å–ª–∏ evaluate_ath_decision —É–¥–∞–ª—è–µ—Ç –∏–∑ pending –∏–ª–∏ —Å—Ç–∞–≤–∏—Ç —Ñ–ª–∞–≥.
                                                          # –°–µ–π—á–∞—Å pending_ath_checks –æ—á–∏—â–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ run_parsing_cycle.
                                                          # –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, —Ç–æ 'decision_made' = True.
                pass # –ü—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

            original_coin_data = check_info.get('data')
            if not original_coin_data:
                 logger.warning(f"ATH_PROCESSOR: 'data' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ check_info –¥–ª—è CA '{ca_from_result}'. –ü—Ä–æ–ø—É—Å–∫.")
                 telegram_handler.ath_results_queue.task_done()
                 continue

            tic = original_coin_data.get('tic', ca_from_result[:6])
            logger.info(f"ATH_PROCESSOR: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω ATH ({ath_seconds}s) –¥–ª—è CA '{ca_from_result}' ({tic}) –æ—Ç {source_bot}. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")


            telegram_handler.ath_results_queue.task_done()

            logger.debug(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}). –§–∏–ª—å—Ç—Ä 1: –í–æ–∑—Ä–∞—Å—Ç ATH. ATH={ath_seconds}s, –ü–æ—Ä–æ–≥={config.THRESHOLD_ATH_SECONDS}s.")
            if ath_seconds > config.THRESHOLD_ATH_SECONDS:
                logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) –ù–ï –ü–†–û–®–ï–õ —Ñ–∏–ª—å—Ç—Ä ATH ({ath_seconds}s > {config.THRESHOLD_ATH_SECONDS}s).")
                if ca_from_result in pending_ath_checks: pending_ath_checks.pop(ca_from_result, None)
                logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) —É–¥–∞–ª–µ–Ω –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è (–Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä ATH).")
                telegram_handler.ath_results_queue.task_done()
                continue
            logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) –ü–†–û–®–ï–õ —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ATH.")

            loop = asyncio.get_running_loop()
            logger.debug(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}). –§–∏–ª—å—Ç—Ä 2: –°—Ç–∞—Ç—É—Å –≤ –ë–î...")
            current_status = await loop.run_in_executor(None, database.get_coin_status, ca_from_result)
            logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}). –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –ë–î: '{current_status}'.")

            if current_status in ["Processing", "Buy Success!"]:
                logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) –ù–ï –ü–†–û–®–ï–õ —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –ë–î (—Å—Ç–∞—Ç—É—Å: '{current_status}').")
                if ca_from_result in pending_ath_checks: pending_ath_checks.pop(ca_from_result, None)
                logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) —É–¥–∞–ª–µ–Ω –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è (—Å—Ç–∞—Ç—É—Å –ë–î).")
                telegram_handler.ath_results_queue.task_done()
                continue
            logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) –ü–†–û–®–ï–õ —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –ë–î.")

            logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) –ü–†–û–®–õ–ê –í–°–ï –§–ò–õ–¨–¢–†–´. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É...")
            volume = original_coin_data.get('v', 0)
            target_bot_username = config.BOT_BUYSELL1_USERNAME if volume < config.THRESHOLD_VOLUME else config.BOT_BUYSELL2_USERNAME
            volume_text = f"–ú–ï–ù–¨–®–ï {config.THRESHOLD_VOLUME:,}" if volume < config.THRESHOLD_VOLUME else f"–ë–û–õ–¨–®–ï –∏–ª–∏ –†–ê–í–ù–û {config.THRESHOLD_VOLUME:,}"
            group_emoji = "üöÄ" if volume < config.THRESHOLD_VOLUME else "üí•"

            logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}). –û–±—ä–µ–º V=${volume:,}. –í—ã–±—Ä–∞–Ω –±–æ—Ç: {target_bot_username}.")

            if not target_bot_username: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ target_bot_username –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                logger.error(f"ATH_PROCESSOR: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å target_bot_username –¥–ª—è CA '{ca_from_result}' ({tic}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ THRESHOLD_VOLUME –∏ –∏–º–µ–Ω–∞ BUYSELL –±–æ—Ç–æ–≤ –≤ config.")
                if ca_from_result in pending_ath_checks: pending_ath_checks.pop(ca_from_result, None)
                telegram_handler.ath_results_queue.task_done()
                continue

            sent_to_buy_bot = await telegram_handler.send_message_to_user_bot(target_bot_username, ca_from_result)
            if not sent_to_buy_bot:
                logger.error(f"ATH_PROCESSOR: –ù–ï –£–î–ê–õ–û–°–¨ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CA '{ca_from_result}' ({tic}) –±–æ—Ç—É {target_bot_username}.")
                telegram_handler.ath_results_queue.task_done()
                continue
            logger.info(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É {target_bot_username}.")

            current_time_str = datetime.now().strftime("%H:%M:%S %d-%m-%Y")
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
            safe_tic = html.escape(tic)
            safe_ca_code = f"<code>{html.escape(ca_from_result)}</code>"
            safe_age_str = html.escape(original_coin_data.get('age_str', 'N/A'))
            
            
            liq_value_group = original_coin_data.get('l', 0) # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            axiom_link = f"https://axiom.trade/t/{ca_from_result}"
            dex_link = f"https://dexscreener.com/solana/{ca_from_result}"
            safe_dex_link = html.escape(dex_link)
            safe_axiom_link = html.escape(axiom_link)

            admin_msg = (f"<b>‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–Ω–µ—Ç–∞!</b>\n"
                         f"({current_time_str})\n\n"
                         f"<b>–¢–∏–∫–µ—Ä:</b> {tic}\n<b>CA:</b> <code>{ca_from_result}</code>\n"
                         f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {original_coin_data.get('age_str', 'N/A')}\n"
                         f"<b>MC:</b> ${original_coin_data.get('mc', 0):,}, <b>Liq:</b> ${liq_value_group:,}\n"
                         f"<b>1 min Vol:</b> ${volume:,}\n"
                         f"<b>ATH Age:</b> {ath_seconds}s ago\n\n"
                         f"<b>–£—Å–ª–æ–≤–∏–µ:</b> –û–±—ä–µ–º {volume_text}$\n<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤:</b> {target_bot_username}\n"
                         f"<b>Axiom:</b> <a href='{axiom_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–∫–µ–Ω</a>")
            await telegram_handler.send_notification_to_admin(admin_msg)

            group_msg = (f"{group_emoji} <b>New Signal üÜï</b>\n" 
                         f"üïí ({html.escape(current_time_str)})\n\n"
                         f"<b>üíä {safe_tic}</b>\n"
                         f"<b>üß≠ CA:</b> {safe_ca_code}\n\n"
                         f"<b>üìÖ Created:</b> {safe_age_str} ago\n"
                         f"<b>üí∞ MC:</b> ${original_coin_data.get('mc', 0):,}\n"
                         f"<b>üíß LQ:</b> ${liq_value_group:,}\n"
                         f"<b>üìä 1m Vol:</b> ${volume:,}\n"
                         f"<b>‚è≥ ATH age:</b> {ath_seconds}s ago\n\n"
                         f"<b>üíπ Charts:</b>| <a href='{safe_axiom_link}'>AXIOM</a> | <a href='{safe_dex_link}'>DEXS</a>")
            group_message_id = await telegram_handler.send_notification_to_group(group_msg)
            
            db_data = {**original_coin_data, 'ca': ca_from_result, 'ath_seconds': ath_seconds, 'status': "Processing", 'group_message_id': group_message_id}
            await loop.run_in_executor(None, database.upsert_coin, db_data)
            logger.info(f"ATH_PROCESSOR: –î–∞–Ω–Ω—ã–µ –¥–ª—è CA '{ca_from_result}' ({tic}) –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'Processing'.")

            if ca_from_result in pending_ath_checks: pending_ath_checks.pop(ca_from_result, None)
            logger.debug(f"ATH_PROCESSOR: CA '{ca_from_result}' ({tic}) —É–¥–∞–ª–µ–Ω –∏–∑ pending_ath_checks.")
            telegram_handler.ath_results_queue.task_done()

        except asyncio.TimeoutError:
            pass # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        except Exception as e:
            logger.error(f"{logger_name}: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            if 'result' in locals() and telegram_handler and hasattr(telegram_handler, 'ath_results_queue'):
                try:
                    telegram_handler.ath_results_queue.task_done()
                except ValueError: # –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ task_done() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –≤–∑—è—Ç
                    logger.warning(f"{logger_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ task_done –≤ –±–ª–æ–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω).")
            await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


async def process_buy_sell_results():
    logger_name = "BUYSELL_PROCESSOR" # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if not telegram_handler or not database:
        logger.error(f"{logger_name}: TelegramHandler –∏–ª–∏ Database –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    logger.info(f"{logger_name}: –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Buy/Sell...")
    while not shutdown_event.is_set():
        try:
            if pause_event.is_set(): # True, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ø–∞—É–∑–µ
                logger.info(f"{logger_name}: –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ (pause_event —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω). –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /play –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–∞—É–∑—ã...")
                while pause_event.is_set(): # –¶–∏–∫–ª, –ø–æ–∫–∞ —Å–æ–±—ã—Ç–∏–µ –ø–∞—É–∑—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                    if shutdown_event.is_set():
                        logger.info(f"{logger_name}: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω—è—Ç–∏—è –ø–∞—É–∑—ã.")
                        break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ while pause_event.is_set()
                    await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å shutdown_event

                if shutdown_event.is_set(): # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑-–∑–∞ shutdown_event
                    logger.info(f"{logger_name}: –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Buy/Sell –∏–∑-–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã.")
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ while not shutdown_event.is_set() –≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

                # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç pause_event.is_set() —Å—Ç–∞–ª False (–ø–∞—É–∑–∞ —Å–Ω—è—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /play)
                if not pause_event.is_set():
                    logger.info(f"{logger_name}: –ü–∞—É–∑–∞ —Å–Ω—è—Ç–∞ (pause_event –æ—á–∏—â–µ–Ω). –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ Buy/Sell.")
                else:
                    # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ while –Ω–µ –ø–æ shutdown_event
                    logger.warning(f"{logger_name}: –í—ã—à–ª–∏ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—É–∑—ã, –Ω–æ pause_event –≤—Å–µ –µ—â–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ shutdown_event –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.")
                    telegram_handler.buy_sell_results_queue.task_done() # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–µ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∑—è—Ç –¥–æ —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–¥–µ—Å—å)
                    continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ while, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –∏–ª–∏ –ø–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ —Å–Ω—è—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await asyncio.wait_for(telegram_handler.buy_sell_results_queue.get(), timeout=1.0)
            logger.info(f"{logger_name}: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            ca = result.get('ca')
            tic = result.get('tic')
            result_type = result.get('type')
            percentage = result.get('per')
            error_type = result.get('error_type')
            source_bot = result.get('source_bot', 'N/A')

            if error_type == 'balance':
                logger.critical(f"{logger_name}: –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç {source_bot} (CA: {ca}). –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ê–í–¢–û-–ü–ê–£–ó–£.")
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ —Å–∞–º–∞ –ø–∞—É–∑–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤ trigger_pause
                await trigger_pause(auto_triggered=True, reason=f"Insufficient balance –æ—Ç {source_bot} –¥–ª—è CA: {ca or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n<b>{tic}</b>\n")
                telegram_handler.buy_sell_results_queue.task_done()
                continue # –ü–æ—Å–ª–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–∞—É–∑—É, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

            if not ca:
                logger.warning(f"{logger_name}: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ CA: {result}. –ü—Ä–æ–ø—É—Å–∫.")
                telegram_handler.buy_sell_results_queue.task_done()
                continue
            
            loop = asyncio.get_running_loop()
            coin_details = await loop.run_in_executor(None, database.get_coin_details, ca)
            
            if not coin_details:
                logger.warning(f"{logger_name}: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è CA '{ca}', –Ω–æ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. Result: {result}")
                telegram_handler.buy_sell_results_queue.task_done()
                continue
                
            tic = coin_details.get('tic', ca[:6])
            group_message_id = coin_details.get('group_message_id')

            if result_type == 'buy':
                logger.info(f"{logger_name}: 'Buy Success!' –¥–ª—è {ca} ({tic}) –æ—Ç {source_bot}.")
                await loop.run_in_executor(None, database.update_coin_status, ca, "Buy Success!")
                await telegram_handler.send_notification_to_admin(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏: {tic} (<code>{ca}</code>) —á–µ—Ä–µ–∑ {source_bot}")

            elif result_type == 'sell':
                logger.info(f"{logger_name}: –ü—Ä–æ–¥–∞–∂–∞ –¥–ª—è {ca} ({tic}) –æ—Ç {source_bot} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {percentage}.")
                await loop.run_in_executor(None, database.update_coin_status, ca, "Sell Success!")
                
                import html 
                admin_msg = f"üí∞ –ü—Ä–æ–¥–∞–ª–∏: {tic} (<code>{ca}</code>) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {percentage} —á–µ—Ä–µ–∑ {source_bot}"
                group_msg = f"üí∞ {html.escape(tic)} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {html.escape(str(percentage))}"
                
                await telegram_handler.send_notification_to_admin(admin_msg)
                if group_message_id:
                    await telegram_handler.send_notification_to_group(group_msg, reply_to_id=group_message_id)
                else:
                    logger.warning(f"{logger_name}: –ù–µ –Ω–∞–π–¥–µ–Ω group_message_id –¥–ª—è CA {ca}, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –±–µ–∑ —Ä–µ–ø–ª–∞—è.")
                    await telegram_handler.send_notification_to_group(group_msg)
            
            elif error_type == 'failed':
                logger.warning(f"{logger_name}: 'Transaction Failed' –¥–ª—è CA {ca} ({tic}) –æ—Ç {source_bot}.")
                await loop.run_in_executor(None, database.update_coin_status, ca, "Buy Failed")
                await telegram_handler.send_notification_to_admin(
                    f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {tic} (<code>{ca}</code>) –Ω–µ —É–¥–∞–ª–∞—Å—å (failed) —á–µ—Ä–µ–∑ {source_bot}. –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ Buy Failed."
                )
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ-–ø–∞—É–∑—É –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await trigger_pause(auto_triggered=True, reason=f"Transaction Failed! –¥–ª—è CA: {ca} ({tic}) –æ—Ç {source_bot}")
            
            telegram_handler.buy_sell_results_queue.task_done()

        except asyncio.TimeoutError:
            pass # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        except Exception as e:
            logger.error(f"{logger_name}: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            if 'result' in locals() and telegram_handler and hasattr(telegram_handler, 'buy_sell_results_queue'):
                try:
                    telegram_handler.buy_sell_results_queue.task_done()
                except ValueError:
                     logger.warning(f"{logger_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ task_done –≤ –±–ª–æ–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")
            await asyncio.sleep(1)
            pass


async def ath_timeout_monitor_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç pending_ath_checks –Ω–∞ —Ç–∞–π–º–∞—É—Ç—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É."""
    global pending_ath_checks # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    while not shutdown_event.is_set():
        # –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(1) 

        if pause_event.is_set(): # –ù–µ —Ä–∞–±–æ—Ç–∞–µ–º –≤–æ –≤—Ä–µ–º—è –æ–±—â–µ–π –ø–∞—É–∑—ã –±–æ—Ç–∞
            continue

        if not telegram_handler or not pending_ath_checks:
            continue

        #logger.debug(f"ATH_TIMEOUT_MONITOR: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ (–≤ pending: {len(pending_ath_checks)})...") # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ evaluate_ath_decision –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å (—Ö–æ—Ç—è —Å–µ–π—á–∞—Å –æ–Ω —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏—Ç —Ñ–ª–∞–≥)
        current_cas_to_check = list(pending_ath_checks.keys())

        for ca in current_cas_to_check:
            check_info = pending_ath_checks.get(ca) # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç.–∫. –æ–Ω–∞ –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            if check_info and not check_info.get('decision_made'):
                # –í—ã–∑—ã–≤–∞–µ–º evaluate_ath_decision, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–∞–π–º–∞—É—Ç—ã
                # –∏ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫ –¥–ª—è –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                await telegram_handler.evaluate_ath_decision(ca, from_monitor=True) 
                # from_monitor=True - —ç—Ç–æ —Ñ–ª–∞–≥, —á—Ç–æ–±—ã evaluate_ath_decision –∑–Ω–∞–ª–∞, —á—Ç–æ –µ–µ –≤—ã–∑–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä, 
                # –∞ –Ω–µ –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞)
            elif not check_info:
                logger.debug(f"ATH_TIMEOUT_MONITOR: CA {ca} —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ pending_ath_checks (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω).")


async def main():
    global logger, browser_parser, telegram_handler, scheduler, pending_ath_checks, ATH_BOT_MODE_RUNTIME, bot_status

    logger = config.setup_logging()
    bot_status = "running" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
    logger.info("="*20 + " –ó–ê–ü–£–°–ö AXIOM VOLUME BOT " + "="*20)
    
    loop = asyncio.get_running_loop()
    
    # --- –ó–∞–ø—Ä–æ—Å —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã ATH –±–æ—Ç–æ–≤ ---
    # ... (–∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ ATH_BOT_MODE_RUNTIME –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    while True:
        prompt = ("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ATH –±–æ—Ç–æ–≤:\n"
                  "1 - –¢–æ–ª—å–∫–æ BOT_ATH1 (@DevsNightmareProbot)\n"
                  "2 - –¢–æ–ª—å–∫–æ BOT_ATH2 (@RickBurpBot)\n"
                  "3 - –û–±–∞ –±–æ—Ç–∞ (BOT_ATH1 –∏ BOT_ATH2) (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
                  "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3): ")
        try:
            choice = await loop.run_in_executor(None, input, prompt)
            choice = choice.strip()
            if choice == "1":
                ATH_BOT_MODE_RUNTIME = "ATH1"
                if not config.BOT_ATH1_USERNAME:
                    logger.error("MAIN: –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º ATH1, –Ω–æ BOT_ATH1_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ .env! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
                    return
                break
            elif choice == "2":
                ATH_BOT_MODE_RUNTIME = "ATH2"
                if not config.BOT_ATH2_USERNAME:
                    logger.error("MAIN: –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º ATH2, –Ω–æ BOT_ATH2_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ .env! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
                    return
                break
            elif choice == "3" or not choice: # –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–û–±–∞"
                ATH_BOT_MODE_RUNTIME = "BOTH"
                if not config.BOT_ATH1_USERNAME or not config.BOT_ATH2_USERNAME:
                    logger.error("MAIN: –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º BOTH, –Ω–æ –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ ATH –±–æ—Ç–∞ (BOT_ATH1_USERNAME, BOT_ATH2_USERNAME) –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –±–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    return
                break
            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        except EOFError: # –ï—Å–ª–∏ input –ø—Ä–µ—Ä–≤–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Docker –±–µ–∑ tty)
            logger.warning("MAIN: –í–≤–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ ATH –±–æ—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'BOTH'.")
            ATH_BOT_MODE_RUNTIME = "BOTH" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not config.BOT_ATH1_USERNAME or not config.BOT_ATH2_USERNAME:
                 logger.error("MAIN: –†–µ–∂–∏–º BOTH –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ ATH –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env!")
                 return
            break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Å —Ä–µ–∂–∏–º–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logger.info(f"MAIN: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ATH –±–æ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ATH_BOT_MODE_RUNTIME}")
    # --- –ö–æ–Ω–µ—Ü –ø—É–Ω–∫—Ç–∞ 2 ---

    database.create_tables()
    
    clear_db_input = await loop.run_in_executor(None, input, "–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º? (–î–∞/–ù–µ—Ç): ")
    if clear_db_input.strip().lower() == '–¥–∞':
        database.clear_all_coin_data()
        logger.info("MAIN: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")

    browser_parser = BrowserParser()
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramHandler —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–±—ç–∫–∞–º–∏ ---
    telegram_handler = TelegramHandler(
        loop=loop,
        stop_callback=trigger_shutdown,  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–±—ç–∫
        pause_callback=trigger_pause,    # –ù–æ–≤—ã–π –∫–æ–ª–±—ç–∫ –¥–ª—è /pause
        play_callback=trigger_play,
        pause_event_main=pause_event
    )
    telegram_handler.pending_ath_checks_ref = pending_ath_checks

    scheduler = AsyncIOScheduler(event_loop=loop) # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    for sig_name_str in ('SIGINT', 'SIGTERM'):
        sig_name_enum = getattr(signal, sig_name_str, None)
        if sig_name_enum:
            try:
                signal.signal(sig_name_enum, signal_handler)
                logger.debug(f"MAIN: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {sig_name_str} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except (ValueError, OSError, RuntimeError) as e_signal:
                logger.warning(f"MAIN: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {sig_name_str}: {e_signal}.")
    
    # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if not await browser_parser.launch_browser():
         logger.critical("MAIN: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
         return
    if not await browser_parser.navigate_to_axiom():
         logger.critical("MAIN: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Axiom. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
         await browser_parser.close_browser()
         return

    print("\n" + "="*30)
    print("–ü–û–ñ–ê–õ–£–ô–°–¢–ê, –í–û–ô–î–ò–¢–ï –í –ê–ö–ö–ê–£–ù–¢ AXIOM –í –û–¢–ö–†–´–í–®–ï–ú–°–Ø –û–ö–ù–ï –ë–†–ê–£–ó–ï–†–ê.")
    print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).")
    await loop.run_in_executor(None, input, "–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    print("="*30 + "\n")

    if not await browser_parser.wait_for_login_confirmation():
        logger.critical("MAIN: –í—Ö–æ–¥ –≤ Axiom –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ telegram_handler —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        # await telegram_handler.send_notification_to_admin("‚ö†Ô∏è –í—Ö–æ–¥ –≤ Axiom –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await browser_parser.close_browser()
        return
    logger.info("MAIN: –í—Ö–æ–¥ –≤ Axiom –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")

    if not await telegram_handler.connect_clients(): # connect_clients —Ç–µ–ø–µ—Ä—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
        logger.critical("MAIN: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        if browser_parser: await browser_parser.close_browser()
        return
    
    

    # !!! –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –ó–ê–ü–£–°–ö–ê PTB POLLING !!!
    ptb_polling_task = None
    if telegram_handler.ptb_app:
        logger.info("MAIN: –ó–∞–ø—É—Å–∫ PTB Application polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")

        async def run_ptb_polling_wrapper(): # –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
            app = telegram_handler.ptb_app
            try:
                if not app: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    logger.error("MAIN: PTB_Polling_Wrapper: ptb_app is None, cannot start polling.")
                    return

                logger.info("MAIN: PTB: –í—ã–∑–æ–≤ app.initialize() –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º updater polling...")
                await app.initialize() # –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Å–æ–∑–¥–∞—Å—Ç updater –∏ dispatcher)
                logger.info("MAIN: PTB: –í—ã–∑–æ–≤ app.start() (–∑–∞–ø—É—Å–∫ Dispatcher, JobQueue –∏ —Ç.–¥.)...") # –ù–æ–≤—ã–π –ª–æ–≥
                await app.start() # <--- –î–û–ë–ê–í–õ–ï–ù –≠–¢–û–¢ –í–ê–ñ–ù–´–ô –í–´–ó–û–í
                if not app.updater: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ updater —Å–æ–∑–¥–∞–Ω
                    logger.error("MAIN: PTB: app.updater is None after initialize(), cannot start polling.")
                    if not shutdown_event.is_set():
                        await trigger_shutdown()
                    return

                logger.info(f"MAIN: PTB: –í—ã–∑–æ–≤ app.updater.start_polling() (Updater: {app.updater})...")
                await app.updater.start_polling(
                    allowed_updates=Update.ALL_TYPES,
                    timeout=30,
                    poll_interval=1.0,
                    drop_pending_updates=True # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                )
                logger.info("MAIN: PTB: app.updater.start_polling() –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ.")

                # –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞—á–∞ —ç—Ç–æ–π –æ–±–µ—Ä—Ç–∫–∏ - –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è "–∂–∏–≤–æ–π", –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç updater 
                # –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ. Updater –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ app.updater.stop().
                while app.updater and app.updater.running and not shutdown_event.is_set():
                    await asyncio.sleep(0.5) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                logger.info(f"MAIN: PTB: –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è polling –∑–∞–≤–µ—Ä—à–µ–Ω (updater.running: {app.updater.running if app.updater else 'N/A'}, shutdown_event: {shutdown_event.is_set()}).")

            except asyncio.CancelledError:
                logger.info("MAIN: PTB polling task (run_ptb_polling_wrapper) –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
            except Exception as e:
                logger.error(f"MAIN: –û—à–∏–±–∫–∞ –≤ PTB polling task (run_ptb_polling_wrapper): {e}", exc_info=True)
                if not shutdown_event.is_set():
                    await trigger_shutdown() # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –µ—Å–ª–∏ polling —É–ø–∞–ª —Å–∞–º
            finally:
                logger.info("MAIN: PTB polling task wrapper (run_ptb_polling_wrapper) –≤—Ö–æ–¥–∏—Ç –≤ –±–ª–æ–∫ finally.")
                if app:
                    if app.updater and app.updater.running:
                        logger.info("MAIN: PTB (finally): updater –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
                        try:
                            await app.updater.stop()
                        except Exception as e_upd_stop:
                            logger.error(f"MAIN: PTB (finally): –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ updater: {e_upd_stop}")
                    if hasattr(app, 'running') and app.running: # –£ Application –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ .running
                        logger.info("MAIN: PTB (finally): Application –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
                        try:
                            await app.stop()
                        except Exception as e_app_stop:
                            logger.error(f"MAIN: PTB (finally): –æ—à–∏–±–∫–∞ –ø—Ä–∏ app.stop(): {e_app_stop}")
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ updater –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ telegram_handler.disconnect_clients()
                # –ø—Ä–∏ —à—Ç–∞—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏. –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏, disconnect_clients —Ç–æ–∂–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω.

        ptb_polling_task = loop.create_task(run_ptb_polling_wrapper(), name="PTB_Polling")
    else:
        logger.error("MAIN: ptb_app –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ telegram_handler, PTB polling –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
    # !!! –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê !!!

    # –î–∞–ª–µ–µ –∏–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥:
    # await telegram_handler.send_notification_to_admin(...)
    # ath_processor_task = loop.create_task(...)
    # buy_sell_processor_task = loop.create_task(...)
    
    await telegram_handler.send_notification_to_admin(
        f"üöÄ –ë–æ—Ç Axiom Volume —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n"
        f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ATH: <b>{ATH_BOT_MODE_RUNTIME}</b>\n"
        f"ATH1: {config.BOT_ATH1_USERNAME or '–ù–µ –∑–∞–¥–∞–Ω'}\n"
        f"ATH2: {config.BOT_ATH2_USERNAME or '–ù–µ –∑–∞–¥–∞–Ω'}\n"
        f"–ü–æ—Ä–æ–≥–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç ATH: <b>{config.THRESHOLD_ATH_SECONDS}s</b>\n"
        f"–ü–æ—Ä–æ–≥–æ–≤—ã–π –æ–±—ä–µ–º: <b>${config.THRESHOLD_VOLUME:,}</b>\n"
        f"–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç –º–æ–Ω–µ—Ç—ã: <b>{config.MIN_COIN_AGE_MINUTES_THRESHOLD} –º–∏–Ω</b>"
    )

    ath_processor_task = loop.create_task(process_ath_results(), name="ATH_Processor")
    buy_sell_processor_task = loop.create_task(process_buy_sell_results(), name="BuySell_Processor")
    ath_timeout_monitor = loop.create_task(ath_timeout_monitor_task(), name="ATH_Timeout_Monitor")
      
    
    try:
        scheduler.add_job(run_parsing_cycle, 'cron', second=config.CHTIME, id='axiom_parsing_job', replace_existing=True, misfire_grace_time=30)
        scheduler.start()
        logger.info(f"MAIN: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ ~{config.CHTIME} —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
         logger.critical(f"MAIN: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}", exc_info=True)
         await trigger_shutdown()
         # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
         for task in [ath_processor_task, buy_sell_processor_task]:
             if task and not task.done(): task.cancel()
         await asyncio.gather(ath_processor_task, buy_sell_processor_task, return_exceptions=True)
         if telegram_handler: await telegram_handler.disconnect_clients()
         if browser_parser: await browser_parser.close_browser()
         return

    logger.info("MAIN: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /stop)...")
    await shutdown_event.wait()

    logger.info("MAIN: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    bot_status = "stopping" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    
    if scheduler and scheduler.running:
        try:
            scheduler.shutdown(wait=False)
            logger.info("MAIN: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e_sched_shutdown:
            logger.error(f"MAIN: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e_sched_shutdown}")
        
    tasks_to_cancel = [ath_processor_task, buy_sell_processor_task]
    logger.info("MAIN: –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π...")
    for task in tasks_to_cancel:
        if task and not task.done():
            task.cancel()
    try:
        await asyncio.gather(*[t for t in tasks_to_cancel if t], return_exceptions=True)
        logger.info("MAIN: –ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    except asyncio.CancelledError:
         logger.info("MAIN: –ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –±—ã–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ gather.")

    # –ò–ó–ú–ï–ù–ò–¢–¨/–î–û–ü–û–õ–ù–ò–¢–¨ –ù–ê:
    tasks_to_await = []
    if ath_processor_task and not ath_processor_task.done():
        ath_processor_task.cancel()
        tasks_to_await.append(ath_processor_task)
    if buy_sell_processor_task and not buy_sell_processor_task.done():
        buy_sell_processor_task.cancel()
        tasks_to_await.append(buy_sell_processor_task)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PTB polling task –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    # Application.stop() (–≤—ã–∑—ã–≤–∞–µ–º—ã–π –≤ telegram_handler.disconnect_clients()) –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª run_polling –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.
    # –ù–æ –º—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ stop().
    if ptb_polling_task and not ptb_polling_task.done():
        logger.info("MAIN: PTB polling task –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞ shutdown, –æ–∂–∏–¥–∞–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º.")
        # –î–∞–µ–º –µ–º—É —à–∞–Ω—Å –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å–∞–º–æ–º—É –ø–æ—Å–ª–µ app.stop()
        try:
            await asyncio.wait_for(ptb_polling_task, timeout=5.0) 
        except asyncio.TimeoutError:
            logger.warning("MAIN: PTB polling task –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥, –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
            ptb_polling_task.cancel()
            tasks_to_await.append(ptb_polling_task) # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è gather, –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∏–ª–∏
        except asyncio.CancelledError:
            logger.info("MAIN: PTB polling task –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ä–∞–Ω–µ–µ.")

        if ptb_polling_task not in tasks_to_await and not ptb_polling_task.done(): # –ï—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
             tasks_to_await.append(ptb_polling_task)


    if 'ath_timeout_monitor' in locals() and ath_timeout_monitor and not ath_timeout_monitor.done():
        logger.info("MAIN: –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ ATH...")
        ath_timeout_monitor.cancel()
        tasks_to_await.append(ath_timeout_monitor)

    if tasks_to_await:
        logger.info(f"MAIN: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(tasks_to_await)} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        try:
            await asyncio.gather(*tasks_to_await, return_exceptions=True)
            logger.info("MAIN: –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        except asyncio.CancelledError: # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ gather —Å–∞–º –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
            logger.info("MAIN: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        logger.info("MAIN: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è/–æ—Ç–º–µ–Ω—ã.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º PTB –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    #if telegram_handler and telegram_handler.ptb_bot and telegram_handler.ptb_app and telegram_handler.ptb_app.running:
    #    try:
    #        await telegram_handler.send_notification_to_admin("üõë –ë–æ—Ç Axiom Volume –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    #    except Exception as e_notify_stop:
    #        logger.error(f"MAIN: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e_notify_stop}")
    logger.info("="*20 + " –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ AXIOM VOLUME BOT " + "="*20)        
    if telegram_handler:
        await telegram_handler.disconnect_clients()

    logger.info("MAIN: –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...")
    await asyncio.sleep(3)

    if browser_parser:
        await browser_parser.close_browser()
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è, –µ—Å–ª–∏ PTB —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –¥–æ disconnect_clients, –Ω–æ –∏ —Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏
    # –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    # if telegram_handler:
    #     try:
    #         await telegram_handler.send_notification_to_admin("üí§ –ë–æ—Ç Axiom Volume –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    #     except Exception:
    #         pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–¥–µ—Å—å

    logger.info("="*20 + " –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ AXIOM VOLUME BOT " + "="*20)


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ asyncio.run()
    # for sig_name_str_main in ('SIGINT', 'SIGTERM'): # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ main() –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ logger
    #     sig_name_enum_main = getattr(signal, sig_name_str_main, None)
    #     if sig_name_enum_main:
    #         try:
    #             signal.signal(sig_name_enum_main, signal_handler)
    #         except (ValueError, OSError, RuntimeError) as e_signal_main:
    #             print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï (__main__): –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {sig_name_str_main}: {e_signal_main}.", file=sys.stderr)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("MAIN_RUN: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ KeyboardInterrupt.", file=sys.stderr)
        if logger: logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ KeyboardInterrupt –≤ –±–ª–æ–∫–µ __main__.")
    except SystemExit as e_exit:
        if logger: logger.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º {e_exit.code}.")
        else: print(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º {e_exit.code}.", file=sys.stderr)
    except Exception as e_global:
         print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ï–ü–ï–†–ï–•–í–ê–ß–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –í MAIN_RUN: {type(e_global).__name__} - {e_global}", file=sys.stderr)
         # –í—ã–≤–æ–¥–∏–º traceback, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–≥–µ—Ä
         if logger: logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ __main__: {e_global}", exc_info=True)
         else:
             import traceback
             traceback.print_exc() # –ü–µ—á–∞—Ç–∞–µ–º traceback, –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    finally:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ
        # –ù–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ main() –ø–æ—Å–ª–µ shutdown_event
        if logger: logger.info("MAIN_RUN: –ë–ª–æ–∫ finally –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
        else: print("MAIN_RUN: –ë–ª–æ–∫ finally –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.", file=sys.stderr)