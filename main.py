# main.py
import asyncio
import logging
import signal # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ctrl+C
import sys
import re
from datetime import datetime
from typing import Dict, Any, Optional

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import config
import database
import utils
from browser_parser import BrowserParser
from telegram_handler import TelegramHandler

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –æ–±—ä–µ–∫—Ç—ã ---
logger: Optional[logging.Logger] = None
browser_parser: Optional[BrowserParser] = None
telegram_handler: Optional[TelegramHandler] = None
scheduler: Optional[AsyncIOScheduler] = None
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞ ATH
# –ö–ª—é—á - CA (–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞), –ó–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–Ω–µ—Ç—ã (–∏–∑ –ø–∞—Ä—Å–µ—Ä–∞)
pending_ath_checks: Dict[str, Dict[str, Any]] = {} 
# –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
shutdown_event = asyncio.Event()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

async def run_parsing_cycle():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Axiom –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ CA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ATH.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º APScheduler.
    –õ–æ–≥–∏–∫–∞ —à–∞–≥–æ–≤ –ë.1 - –ë.8.
    """
    if shutdown_event.is_set():
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –ü—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        return
        
    if not browser_parser:
        logger.error("–≠–∫–∑–µ–º–ø–ª—è—Ä BrowserParser –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    if not telegram_handler:
         logger.error("–≠–∫–∑–µ–º–ø–ª—è—Ä TelegramHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
         return

    logger.info("="*10 + " –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Axiom " + "="*10)
    
    # –®–∞–≥ –ë.3 - –ë.5: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    parsed_coins = await browser_parser.parse_discover_page()

    if parsed_coins is None:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Axiom. –¶–∏–∫–ª –ø—Ä–µ—Ä–≤–∞–Ω.")
        return
    if not parsed_coins:
        logger.info("–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Axiom –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        # --- –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£, –ß–¢–û –ù–ï–¢ –ú–û–ù–ï–¢ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
        if telegram_handler:
            await telegram_handler.send_notification_to_admin("‚ÑπÔ∏è –ù–∞ Axiom –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ.")
        # -------------------------------------------------
        logger.info("="*10 + " –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Axiom " + "="*10)
        return
        
    logger.info(f"–°–ø–∞—Ä—Å–µ–Ω–æ {len(parsed_coins)} –º–æ–Ω–µ—Ç. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ATH...")
    
    # --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–ü–†–ê–í–ö–ê –ü–û–î–†–û–ë–ù–û–ì–û –û–¢–ß–ï–¢–ê –û –ü–ê–†–°–ò–ù–ì–ï ---
    if telegram_handler:
        report_message = f"<b>üîé –û—Ç—á–µ—Ç –æ –ø–∞—Ä—Å–∏–Ω–≥–µ Axiom ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})</b>\n"
        report_message += f"–ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç: {len(parsed_coins)}\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ –æ—Ç—á–µ—Ç–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
        coins_to_report = parsed_coins[:15] # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–µ 15
        
        for idx, coin in enumerate(coins_to_report):
            tic = coin.get('tic', 'N/A')
            age = coin.get('age_str', '?')
            mc_val = coin.get('mc', 0)
            l_val = coin.get('l', 0)
            v_val = coin.get('v', 0)
            ca_short = coin.get('ca', 'NO_CA')[:6] + "..." if coin.get('ca') != 'N/A' else "NO_CA"

            report_message += (
                f"<b>{idx+1}. {tic}</b> (<code>{ca_short}</code>)\n"
                f"   –í–æ–∑—Ä–∞—Å—Ç: {age}, MC: ${mc_val:,}, Liq: ${l_val:,}, Vol: ${v_val:,}\n"
            )
        
        if len(parsed_coins) > len(coins_to_report):
            report_message += f"\n<i>... –∏ –µ—â–µ {len(parsed_coins) - len(coins_to_report)} –º–æ–Ω–µ—Ç.</i>"
            
        await telegram_handler.send_notification_to_admin(report_message)
    # -----------------------------------------------------------
    
    processed_count = 0
    # –®–∞–≥ –ë.6 - –ë.8: –ò—Ç–µ—Ä–∞—Ü–∏—è, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ CA
    for coin_data in parsed_coins:
        if shutdown_event.is_set():
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–Ω–µ—Ç.")
            break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–Ω–µ—Ç

        ca = coin_data.get('ca')
        age_str = coin_data.get('age_str')
        
        if not ca or not age_str:
            logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CA –∏–ª–∏ Age –≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã: {coin_data}. –ü—Ä–æ–ø—É—Å–∫.")
            continue
            
        # –®–∞–≥ –ë.7 (–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É)
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã <= 8 –º–∏–Ω—É—Ç ('s', '1m'...'8m')
        age_match = re.match(r"(\d+)([sm])", age_str) # –ò—â–µ–º —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –º–∏–Ω—É—Ç—ã
        if age_match:
            value = int(age_match.group(1))
            unit = age_match.group(2)
            if unit == 's' or (unit == 'm' and value <= 8):
                 logger.debug(f"–ú–æ–Ω–µ—Ç–∞ {coin_data.get('tic', ca)} —Å–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥–∞—è ({age_str}). –ü—Ä–æ–ø—É—Å–∫.")
                 continue

        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—É –≤ —Å–ª–æ–≤–∞—Ä—å –æ–∂–∏–¥–∞–Ω–∏—è –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –Ω–∞—Å –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç
        pending_ath_checks[ca] = coin_data
        logger.debug(f"–ú–æ–Ω–µ—Ç–∞ {coin_data.get('tic', ca)} ({ca}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ ATH.")
        
        # –®–∞–≥ –ë.8 (–û—Ç–ø—Ä–∞–≤–∫–∞ CA –±–æ—Ç–∞–º ATH —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ CA {ca} ({coin_data.get('tic')}) –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ATH...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–º—É –±–æ—Ç—É
        sent1 = await telegram_handler.send_message_to_user_bot(config.BOT_ATH1_USERNAME, ca)
        await asyncio.sleep(1.1) # –ü–∞—É–∑–∞ > 1 —Å–µ–∫
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–º—É –±–æ—Ç—É
        sent2 = await telegram_handler.send_message_to_user_bot(config.BOT_ATH2_USERNAME, ca)
        await asyncio.sleep(1.1) # –ü–∞—É–∑–∞ > 1 —Å–µ–∫

        if not sent1 and not sent2:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CA {ca} –Ω–∏ –æ–¥–Ω–æ–º—É ATH –±–æ—Ç—É.")
             # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
             pending_ath_checks.pop(ca, None) 
        else:
             processed_count += 1

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {processed_count} CA –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ATH.")
    logger.info("="*10 + " –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Axiom " + "="*10)


async def process_ath_results():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ATH –∏–∑ –æ—á–µ—Ä–µ–¥–∏ telegram_handler.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —à–∞–≥–æ–≤ –í.3 - –í.5 (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ATH, —Ñ–∏–ª—å—Ç—Ä—ã, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Buy/Sell –±–æ—Ç—ã, –∑–∞–ø–∏—Å—å –≤ –ë–î).
    """
    if not telegram_handler or not database:
        logger.error("TelegramHandler –∏–ª–∏ Database –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ATH —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
        return
        
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ATH...")
    while not shutdown_event.is_set():
        try:
            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            result = await asyncio.wait_for(telegram_handler.ath_results_queue.get(), timeout=1.0)
            
            ca = result.get('ca')
            error = result.get('error')
            source_bot = result.get('source_bot', 'N/A')
            
            if not ca:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω ATH —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ CA: {result}")
                telegram_handler.ath_results_queue.task_done()
                continue

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è –æ–∂–∏–¥–∞–Ω–∏—è
            original_coin_data = pending_ath_checks.get(ca)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è 
            # (–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç, –∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –æ—à–∏–±–∫–∞ –ø–æ–∑–∂–µ)
            if not original_coin_data:
                 logger.debug(f"–ü–æ–ª—É—á–µ–Ω ATH —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {ca}, –Ω–æ –æ–Ω —É–∂–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ –∏–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
                 telegram_handler.ath_results_queue.task_done()
                 continue

            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç –±–æ—Ç–∞
            if error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ATH –¥–ª—è {ca} –æ—Ç {source_bot}: {error}. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞...")
                logger.info(f"ATH_PROCESSOR: {ca} –æ—Ç–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç –±–æ—Ç–∞.")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–∏—à–ª–∞ –æ—à–∏–±–∫–∞, –∏ –∂–¥–∞—Ç—å —Ç–∞–π–º–∞—É—Ç –≤—Ç–æ—Ä–æ–≥–æ.
                # –ü–æ–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ATH –Ω–µ—É–¥–∞—á–Ω–æ–π.
                logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ ATH –¥–ª—è {ca} ({original_coin_data.get('tic')}) –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                pending_ath_checks.pop(ca, None) # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
                telegram_handler.ath_results_queue.task_done()
                continue
                
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–∏—à–µ–ª ath_seconds
            ath_seconds = result.get('ath_seconds')
            if ath_seconds is None: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                logger.error(f"–ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π ATH —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {ca}, –Ω–æ –±–µ–∑ ath_seconds: {result}")
                pending_ath_checks.pop(ca, None) 
                telegram_handler.ath_results_queue.task_done()
                continue
                
            # --- –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è ATH ---
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω ATH ({ath_seconds}s) –¥–ª—è {ca} ({original_coin_data.get('tic')}) –æ—Ç {source_bot}. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
            
            # –®–∞–≥ –í.5.2 (–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É ATH)
            if ath_seconds > config.THRESHOLD_ATH_SECONDS:
                logger.info(f"ATH {ath_seconds}s –¥–ª—è {ca} ({original_coin_data.get('tic')}) > –ø–æ—Ä–æ–≥–∞ {config.THRESHOLD_ATH_SECONDS}s. –ü—Ä–æ–ø—É—Å–∫.")
                logger.info(f"ATH_PROCESSOR: {ca} –æ—Ç–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ ATH.")
                pending_ath_checks.pop(ca, None) 
                telegram_handler.ath_results_queue.task_done()
                continue
                
            # –®–∞–≥ –í.5.3 (–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ë–î
            loop = asyncio.get_running_loop()
            current_status = await loop.run_in_executor(None, database.get_coin_status, ca)
            
            if current_status in ["Processing", "Buy Success!"]:
                # ---------------------------
                logger.info(f"–ú–æ–Ω–µ—Ç–∞ {ca} ({original_coin_data.get('tic')}) —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {current_status}). –ü—Ä–æ–ø—É—Å–∫.")
                logger.info(f"ATH_PROCESSOR: {ca} –æ—Ç–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î.") 
                pending_ath_checks.pop(ca, None) 
                telegram_handler.ath_results_queue.task_done()
                continue
                
            # --- –ú–æ–Ω–µ—Ç–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–∫—É–ø–∫—É ---
            logger.info(f"–ú–æ–Ω–µ—Ç–∞ {ca} ({original_coin_data.get('tic')}) –ü–†–û–®–õ–ê –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É...")
            
            volume = original_coin_data.get('v', 0)
            target_bot_username = None
            volume_text = ""

            # –®–∞–≥ –í.5.4 (–í—ã–±–æ—Ä –±–æ—Ç–∞ Buy/Sell)
            if volume < config.THRESHOLD_VOLUME:
                target_bot_username = config.BOT_BUYSELL1_USERNAME
                volume_text = f"–ú–ï–ù–¨–®–ï {config.THRESHOLD_VOLUME}"
                group_emoji = "üöÄ"
            else:
                target_bot_username = config.BOT_BUYSELL2_USERNAME
                volume_text = f"–ë–û–õ–¨–®–ï –∏–ª–∏ –†–ê–í–ù–û {config.THRESHOLD_VOLUME}"
                group_emoji = "üí•"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ CA –±–æ—Ç—É Buy/Sell
            sent_to_buy_bot = await telegram_handler.send_message_to_user_bot(target_bot_username, ca)
            
            if not sent_to_buy_bot:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CA {ca} –±–æ—Ç—É {target_bot_username}.")
                # –ù–µ —É–¥–∞–ª—è–µ–º –∏–∑ pending, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ? –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
                telegram_handler.ath_results_queue.task_done()
                continue # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–µ –ø–∏—à–µ–º –≤ –ë–î, –µ—Å–ª–∏ –Ω–µ —É—à–ª–æ –±–æ—Ç—É

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            current_time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            notify_admin_msg = (
                f"<b>‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–Ω–µ—Ç–∞!</b>\n"
                f"<i>({current_time_str})</i>\n\n"
                f"<b>–¢–∏–∫–µ—Ä:</b> {original_coin_data.get('tic', 'N/A')}\n"
                f"<b>CA:</b> <code>{ca}</code>\n"
                f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {original_coin_data.get('age_str', 'N/A')}\n"
                f"<b>MC:</b> ${original_coin_data.get('mc', 0):,}\n"
                f"<b>Liq:</b> ${original_coin_data.get('l', 0):,}\n"
                f"<b>Volume:</b> ${original_coin_data.get('v', 0):,}\n"
                f"<b>ATH Age:</b> {ath_seconds}s\n\n"
                f"<b>–£—Å–ª–æ–≤–∏–µ:</b> –û–±—ä–µ–º {volume_text}\n"
                f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤:</b> {target_bot_username}"
            )
            
            notify_group_msg = (
                 f"{group_emoji} <b>–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª | {original_coin_data.get('tic', 'N/A')}</b>\n"
                 f"<i>({current_time_str})</i>\n\n"
                 f"<b>CA:</b> <code>{ca}</code>\n"
                 f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {original_coin_data.get('age_str', 'N/A')}\n"
                 f"<b>MC –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ:</b> ${original_coin_data.get('mc', 0):,}\n"
                 f"<b>–û–±—ä–µ–º –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ:</b> ${original_coin_data.get('v', 0):,}\n"
                 f"<b>–í–æ–∑—Ä–∞—Å—Ç ATH:</b> {ath_seconds}s"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await telegram_handler.send_notification_to_admin(notify_admin_msg)
            group_message_id = await telegram_handler.send_notification_to_group(notify_group_msg)

            # –®–∞–≥ –í.5.5 (–ó–∞–ø–∏—Å—å/–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î)
            db_data = {
                **original_coin_data, # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'ath_seconds': ath_seconds,
                'status': "Processing", # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                'group_message_id': group_message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
            }
            await loop.run_in_executor(None, database.upsert_coin, db_data)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            pending_ath_checks.pop(ca, None)
            
            telegram_handler.ath_results_queue.task_done()

        except asyncio.TimeoutError:
            # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ATH —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}", exc_info=True)
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if 'result' in locals() and telegram_handler:
                 telegram_handler.ath_results_queue.task_done()
            await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def process_buy_sell_results():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏/–æ—à–∏–±–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ telegram_handler.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    if not telegram_handler or not database:
         logger.error("TelegramHandler –∏–ª–∏ Database –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Buy/Sell —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
         return

    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Buy/Sell...")
    while not shutdown_event.is_set():
        try:
            result = await asyncio.wait_for(telegram_handler.buy_sell_results_queue.get(), timeout=1.0)
            
            ca = result.get('ca')
            result_type = result.get('type') 
            percentage = result.get('per') 
            error_type = result.get('error_type') 
            source_bot = result.get('source_bot', 'N/A')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –æ—à–∏–±–∫–µ –±–∞–ª–∞–Ω—Å–∞
            if error_type == 'balance':
                 logger.critical(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Buy/Sell –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±–∞–ª–∞–Ω—Å–∞ (CA: {ca}).")
                 telegram_handler.buy_sell_results_queue.task_done()
                 continue 

            # –ï—Å–ª–∏ –Ω–µ—Ç CA (–∫—Ä–æ–º–µ –æ—à–∏–±–∫–∏ –±–∞–ª–∞–Ω—Å–∞), –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            if not ca:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω Buy/Sell —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ CA: {result}")
                telegram_handler.buy_sell_results_queue.task_done()
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–µ—Ç–∞–ª–∏ –º–æ–Ω–µ—Ç—ã –∏–∑ –ë–î
            loop = asyncio.get_running_loop()
            coin_details = await loop.run_in_executor(None, database.get_coin_details, ca)
            
            if not coin_details:
                 logger.warning(f"–ü–æ–ª—É—á–µ–Ω Buy/Sell —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è CA {ca}, –Ω–æ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. Result: {result}")
                 telegram_handler.buy_sell_results_queue.task_done()
                 continue
                 
            tic = coin_details.get('tic', 'N/A')
            group_message_id = coin_details.get('group_message_id')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if result_type == 'buy':
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ 'Buy Success!' –¥–ª—è {ca} ({tic}).")
                await loop.run_in_executor(None, database.update_coin_status, ca, "Buy Success!")
                await telegram_handler.send_notification_to_admin(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏: {tic} (<code>{ca}</code>) —á–µ—Ä–µ–∑ {source_bot}")

            elif result_type == 'sell':
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {ca} ({tic}) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {percentage}.")
                await loop.run_in_executor(None, database.update_coin_status, ca, "Sell Success!")
                
                admin_msg = f"üí∞ –ü—Ä–æ–¥–∞–ª–∏: {tic} (<code>{ca}</code>) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {percentage} —á–µ—Ä–µ–∑ {source_bot}"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º html.escape –¥–ª—è —Ç–∏–∫–µ—Ä–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                import html
                group_msg = f"üí∞ {html.escape(tic)} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {html.escape(str(percentage))}" 
                
                await telegram_handler.send_notification_to_admin(admin_msg)
                if group_message_id: 
                     await telegram_handler.send_notification_to_group(group_msg, reply_to_id=group_message_id)
                else:
                     logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω group_message_id –¥–ª—è CA {ca}, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –±–µ–∑ —Ä–µ–ø–ª–∞—è.")
                     await telegram_handler.send_notification_to_group(group_msg)
            
            # --- –î–û–ë–ê–í–õ–ï–ù–ê –û–ë–†–ê–ë–û–¢–ö–ê Transaction Failed ---
            elif error_type == 'failed':
                logger.warning(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ 'Transaction Failed' –¥–ª—è CA {ca} –æ—Ç {source_bot}.")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "Buy Failed", —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–∫—É–ø–∫—É
                await loop.run_in_executor(None, database.update_coin_status, ca, "Buy Failed") 
                await telegram_handler.send_notification_to_admin(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {tic} (<code>{ca}</code>) –Ω–µ —É–¥–∞–ª–∞—Å—å (failed) —á–µ—Ä–µ–∑ {source_bot}. –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ Buy Failed.")
            # -----------------------------------------------
                
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            telegram_handler.buy_sell_results_queue.task_done()

        except asyncio.TimeoutError:
            pass # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Buy/Sell —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}", exc_info=True)
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
            if 'result' in locals() and telegram_handler:
                 telegram_handler.buy_sell_results_queue.task_done()
            await asyncio.sleep(1) 
# ------------------------------------------------------

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –†–∞–±–æ—Ç—ã ---

async def trigger_shutdown():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."""
    if not shutdown_event.is_set():
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
        shutdown_event.set()

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –û–° (SIGINT, SIGTERM)."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º call_soon_threadsafe, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    asyncio.get_running_loop().call_soon_threadsafe(lambda: asyncio.create_task(trigger_shutdown()))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global logger, browser_parser, telegram_handler, scheduler
    
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    logger = config.setup_logging()
    logger.info("="*20 + " –ó–ê–ü–£–°–ö AXIOM VOLUME BOT " + "="*20)
    database.create_tables() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    browser_parser = BrowserParser()
    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –≤ TelegramHandler
    loop = asyncio.get_running_loop()
    # main.py (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ù–û–í–´–ô telegram_handler.py)
    telegram_handler = TelegramHandler(loop)
    scheduler = AsyncIOScheduler(event_loop=loop)

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for sig_name in ('SIGINT', 'SIGTERM'):
        if hasattr(signal, sig_name):
             try:
                 # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ - —Ç–æ—Ç, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç asyncio
                 signal.signal(getattr(signal, sig_name), signal_handler)
             except ValueError: # –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {sig_name}")
    
    # 3. –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    
    # –û—á–∏—Å—Ç–∫–∞ –ë–î
    clear_db = input("–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º? (–î–∞/–ù–µ—Ç): ").strip().lower()
    if clear_db == '–¥–∞':
        database.clear_all_coin_data()
        
    # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    if not await browser_parser.launch_browser():
         logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
         return # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
         
    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if not await browser_parser.navigate_to_axiom():
         logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Axiom. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
         await browser_parser.close_browser()
         return
         
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
    #await telegram_handler.send_notification_to_admin("ü§ñ –ë–æ—Ç Axiom Volume –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...") # –í—Ä–µ–º–µ–Ω–Ω–æ —Ç–∞–∫, THandler –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n" + "="*30)
    print("–ü–û–ñ–ê–õ–£–ô–°–¢–ê, –í–û–ô–î–ò–¢–ï –í –ê–ö–ö–ê–£–ù–¢ AXIOM –í –û–¢–ö–†–´–í–®–ï–ú–°–Ø –û–ö–ù–ï –ë–†–ê–£–ó–ï–†–ê.")
    print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è).")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è input, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å asyncio
    await loop.run_in_executor(None, input, "–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    print("="*30 + "\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞
    if not await browser_parser.wait_for_login_confirmation():
        logger.critical("–í—Ö–æ–¥ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω 'PRESET 1'). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        await telegram_handler.send_notification_to_admin("‚ö†Ô∏è –í—Ö–æ–¥ –≤ Axiom –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.") # –í—Ä–µ–º–µ–Ω–Ω–æ
        await browser_parser.close_browser()
        return
        
    logger.info("–í—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

    # 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–æ–ª–±—ç–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if not await telegram_handler.connect_clients(stop_callback=trigger_shutdown):
         logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
         await browser_parser.close_browser()
         return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
    await telegram_handler.send_notification_to_admin("ü§ñ –ë–æ—Ç Axiom Volume –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...") # –í—Ä–µ–º–µ–Ω–Ω–æ —Ç–∞–∫, THandler –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    
      
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π Telegram
    await telegram_handler.send_notification_to_admin("üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
    ath_processor_task = loop.create_task(process_ath_results(), name="ATH_Processor")
    buy_sell_processor_task = loop.create_task(process_buy_sell_results(), name="BuySell_Processor")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler.add_job(
            run_parsing_cycle, 
            trigger='cron', 
            second=config.CHTIME, 
            id='axiom_parsing_job', 
            replace_existing=True,
            misfire_grace_time=15 # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ 15 —Å–µ–∫
        )
        scheduler.start()
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ {config.CHTIME} —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
         logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}", exc_info=True)
         await trigger_shutdown() # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–ø–∞–ª

    # 5. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)...")
    await shutdown_event.wait() # –ë–ª–æ–∫–∏—Ä—É–µ–º—Å—è –∑–¥–µ—Å—å, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω trigger_shutdown

    # 6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if scheduler and scheduler.running:
        scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
    # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
    logger.info("–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π...")
    ath_processor_task.cancel()
    buy_sell_processor_task.cancel()
    try:
        # –î–∞–µ–º –∑–∞–¥–∞—á–∞–º —à–∞–Ω—Å –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        await asyncio.gather(ath_processor_task, buy_sell_processor_task, return_exceptions=True)
        logger.info("–ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    except asyncio.CancelledError:
         logger.info("–ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
         
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telegram
    if telegram_handler:
        await telegram_handler.disconnect_clients()
    
    # --- –î–û–ë–ê–í–ò–¢–¨ –ó–ê–î–ï–†–ñ–ö–£ ---
    logger.info("–ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...")
    await asyncio.sleep(2) # –ü–∞—É–∑–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    # --------------------------
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    if browser_parser:
        await browser_parser.close_browser()
        
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å,
    # –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
    # await telegram_handler.send_notification_to_admin("ÎÅÑ –ë–æ—Ç Axiom Volume –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    logger.info("="*20 + " –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ AXIOM VOLUME BOT " + "="*20)


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    #if sys.platform == "win32":
    #    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt).")
    except Exception as e:
         # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
         print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ main: {e}", file=sys.stderr)
         if logger:
             logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
         else: # –ï—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –Ω–µ —É—Å–ø–µ–ª –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è
             logging.basicConfig(level=logging.ERROR)
             logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞: {e}", exc_info=True)